import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher
from aiogram.types import Message, Update
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiohttp import ClientSession
import google.generativeai as genai

# --- Config ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()
genai.configure(api_key=GEMINI_API_KEY)

# --- Logging ---
logging.basicConfig(level=logging.INFO)

# --- System Prompt ---
SYSTEM_PROMPT = """
ุฅูุช ูุณุงุนุฏ ุฐูู ุชุชุนุงูู ูุน ุงููุงุณ ุจุทุฑููุฉ ูุถุญูุฉ ููุทููุฉ ุชุฌุนู ุงููุงุณ ูุถุญููู ูู ููุงูู ุจุชุดุชุบู ูุน ุนูุงุฏุฉ "ุณูุงูู ููุฑ ููุฃุณูุงู" ูู ุงููุงูุฑุฉ. ุฑุฏ ุนูู ุงููุงุณ ูุฃูู ูุงุญุฏ ูุตุฑู ุนุงุฏูุ ูุจุดูู ูุฎุชุตุฑ ููุจุงุดุฑ.

**ููุงุนุฏ ูููุฉ:**
1. **ุงุชููู ุจุงููุตุฑู ูุจุณ**: ุงุณุชุฎุฏู ููุฌุฉ ูุตุฑูุฉ ุทุจูุนูุฉุ ุฒู "ุฅุฒูู"ุ "ุนุงูู ุฅูู"ุ "ุชุญุช ุฃูุฑู"ุ "ูุง ููุฏู"ุ "ุจุต ูุง ุจุงุดุง"ุ ููุฏู. ุฎููู ุฎููู ููุฏูุฏ.
2. **ุฅูุช ูุด ุจุชุงุฎุฏ ููุงุนูุฏ**: ููู ูููุงุณ ุฅูู ูุณุงุนุฏ ุฐูู ููุจุชุญุฌุฒุด ุจููุณูุ ููู ูููู ุชุณุงุนุฏูู ุจูุนูููุฉ ุฃู ุชุฑุดุฏูู. ูู ุญุฏ ุณุฃู ุนู ุงูุญุฌุฒุ ูููู ูุชุตู ุจุงูุนูุงุฏุฉ ุนูู +20 2 1234-5678.
3. **ุงูุฎุฏูุงุช ูุงูุฃุณุนุงุฑ**: ูู ุญุฏ ุณุฃู ุนู ุญุงุฌุฉุ ุฑุฏ ุจุงููุนูููุฉ ูู ุงููู ุชุญุชุ ุจุณ ุฏุงูููุง ูุถูุญ ุฅู ุงูุฃุณุนุงุฑ ุชูุฑูุจูุฉ ููููู ุชุฎุชูู ุญุณุจ ุงูุญุงูุฉ.
4. **ุงูุฑุณุงุฆู ุงูุตูุชูุฉ**: ูู ุฌุงุชูู ฺคููุณุ ุงุณูุนูุ ุงููู ุงูุดุฎุต ุนุงูุฒ ุฅููุ ูุฑุฏ ุนููู ูุชุงุจุฉ ุจููุณ ุงูุทุฑููุฉ ุฏู.
5. **ุฎููู ูุฎุชุตุฑ ุนูู ูุฏ ูุง ุชูุฏุฑ**: ุฌุงูุจ ุจุณุฑุนุฉ ูุงุฏุฎู ูู ุงูููุถูุนุ ูู ุบูุฑ ูู ูุฏูุฑุงู.

**ูุนูููุงุช ุงูุนูุงุฏุฉ:**
- ุงูุงุณู: ุนูุงุฏุฉ ุณูุงูู ููุฑ ููุฃุณูุงู
- ุงูุนููุงู: ุงููุงูุฑุฉุ ูุตุฑ
- ุงูุชููููู (ููุญุฌุฒ ูุงูุทูุงุฑุฆ): +20 2 1234-5678
- ุงูููุงุนูุฏ: ุงูุณุจุช ูู ุงูุฎููุณ (9ุต - 8ู)ุ ุงูุฌูุนุฉ (2ู - 8ู)

**ุงูุฎุฏูุงุช ูุงูุฃุณุนุงุฑ (ุฌููู ูุตุฑู ุชูุฑูุจูุง):**
- ุงููุดู: 300
- ุชูุธูู ุงูุฃุณูุงู: 500
- ุญุดู ุณู: ูู 400
- ุนูุงุฌ ุนุตุจ: ูู 1500
- ุฎูุน ุณู: ูู 600
- ุฒุฑุงุนุฉ ุณู: ูู 8000
- ุชุจููุถ ุงูุฃุณูุงู: 2500

**ููุงุญุธุงุช:**
- ูุชูุฑุฑุด ููุณ ุงูุฌููุฉ ุฃู ุงูููุฏูุฉ ูู ูู ุฑุฏ. ุฎููู ุทุจูุนู ููุชุบูุฑ.
- ูู ูุด ูุงูู ุงูุฑุณุงูุฉุ ุงุณุฃู ุงูุดุฎุต ููุถุญ ุฃูุชุฑ.
- ูู ุญุฏ ูุงู "ุดูุฑุงู" ุฃู ุญุงุฌุฉ ุดุจู ูุฏูุ ุฑุฏ ุนููู ุฑุฏ ุจุณูุท ููุทูู.
"""

# --- Telegram Handlers ---
@dp.message(Command("start"))
async def command_start_handler(message: Message):
    await message.answer("ุฅุฒูู ูุง ูุฌู! ๐ ุฃูุง ูุณุงุนุฏ ุนูุงุฏุฉ ุณูุงูู ููุฑ. ุงุจุนุชูู ุณุคุงูู ูุต ุฃู ฺคููุณ.")

@dp.message()
async def handle_user_message(message: Message):
    try:
        if message.voice:
            file = await bot.get_file(message.voice.file_id)
            file_path = file.file_path

            async with ClientSession() as session:
                file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
                async with session.get(file_url) as resp:
                    audio_bytes = await resp.read()

            gemini_input = [
                SYSTEM_PROMPT,
                "ุงูููุฒุฑ ุจุนุช ฺคููุณ. ุงููู ูู ุจูููู ุฅูู ูุฑุฏ ุนููู ุจุงููุตุฑู.",
                {
                    "mime_type": "audio/ogg",
                    "data": audio_bytes
                }
            ]
        elif message.text:
            gemini_input = [
                SYSTEM_PROMPT,
                f"User message: \"{message.text}\""
            ]
        else:
            await message.answer("ุฃูุง ุจููู ุจุณ ุงูุฑุณุงุฆู ุงููุตูุฉ ูุงูฺคููุณ. ุงุจุนุชูู ุญุงุฌุฉ ูู ุฏูู.")
            return

        response = await generate_gemini_response(gemini_input)
        await message.answer(response)

    except Exception as e:
        logging.exception("Error handling message")
        await message.answer("ุญุตู ุญุงุฌุฉ ุบูุท ุนูุฏู ๐. ูููู ุงูุนูุงุฏุฉ ุนูู +20 2 1234-5678.")

# --- Gemini ---
async def generate_gemini_response(input_parts):
    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(input_parts)
        return response.text.strip()
    except Exception as e:
        logging.exception("Gemini API error")
        return "ุขุณูุ ูุฎู ูุตู ๐. ุฌุฑุจ ุชุจุนุชูู ุชุงูู ุฃู ูููู ุงูุนูุงุฏุฉ ุนูู ุทูู."

# --- FastAPI Webhook ---
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
def root():
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook("https://test-telegram-fawn.vercel.app/webhook")
